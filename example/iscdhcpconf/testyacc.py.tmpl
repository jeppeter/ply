#! /usr/bin/env python

import sys
import os
import importlib
import extargsparse
import logging

def _insert_path(path,*args):
    _curdir = os.path.join(path,*args)
    if _curdir  in sys.path:
        sys.path.remove(_curdir)
    sys.path.insert(0,_curdir)
    return

_insert_path(os.path.dirname(os.path.realpath(__file__)))
_insert_path(os.path.dirname(os.path.realpath(__file__)),'..','..')

import ply.yacc as yacc
import ply.lex as lex
import testlex as dlex
import dhcpconf

class ConfigDhcpYacc(object):pass

class DhcpConfYacc(ConfigDhcpYacc):
    tokens = dlex.DhcpConfLex.tokens
    def __init__(self,lexer=None):
        super(DhcpConfYacc,self).__init__(lexer)
        return

    def format_config(self):
        s = ''
        if self.statements is not None:
            #logging.info('statements %s'%(repr(self.statements)))
            s += self.statements.format_config()
        return s


    def p_error(self,p):
        if isinstance(p,object) and isinstance(p,lex.LexToken):
            pass
        raise Exception('error handle %s'%(repr(p)))

    def build(self,**kwargs):
        return yacc.yacc(module=self,start='statements',**kwargs)


def read_file(infile=None):
    fin = sys.stdin
    if infile is not None:
        logging.info('infile %s'%(infile))
        fin = open(infile,'r')
    bmode = False
    if 'b' in fin.mode:
        bmode = True
    s = ''
    for l in fin:
        if sys.version[0] == '2' or not bmode:
            s += l
        else:
            s += l.decode(encoding='UTF-8')
    if fin != sys.stdin:
        fin.close()
    fin = None
    return s

def write_file(s,outfile=None):
    fout = sys.stdout
    bmode = False
    if outfile is not None:
        fout = open(outfile,'wb')
    if 'b' in fout.mode:
        bmode = True

    if sys.version[0] == '2' or not bmode:
        fout.write('%s'%(s))
    else:
        fout.write(s.encode(encoding='UTF-8'))
    if fout != sys.stdout:
        fout.close()
    fout = None
    return

def set_logging(args):
    loglvl= logging.ERROR
    if args.verbose >= 3:
        loglvl = logging.DEBUG
    elif args.verbose >= 2:
        loglvl = logging.INFO
    if logging.root is not None and len(logging.root.handlers) > 0:
        logging.root.handlers = []
    logging.basicConfig(level=loglvl,format='%(asctime)s:%(filename)s:%(funcName)s:%(lineno)d\t%(message)s')
    return

def config_handler(args,parser):
    set_logging(args)
    #if args.verbose >= 3:
    #    yacc.yaccdevel = True
    s = read_file(args.input)
    dhcplex = dlex.DhcpConfLex()
    lexer = dhcplex.build()
    dhcpyacc = DhcpConfYacc(lexer)
    parser = dhcpyacc.build(tabmodule='testparse')
    parser.parse(s)
    s = dhcpyacc.format_config()
    sys.stdout.write('%s'%(s))
    sys.exit(0)
    return

def addhost_handler(args,parser):
    set_logging(args)
    if args.macaddr is None or \
        args.ipaddr is None or \
        args.hostname is None:
        raise Exception('must specified macaddr[--macaddr|-m] hostname[--hostname|-H] ipaddr[--ipaddr|-I]')
    s = read_file(args.input)
    dhcplex = dlex.DhcpConfLex()
    lexer = dhcplex.build()
    dhcpyacc = DhcpConfYacc(lexer)
    parser = dhcpyacc.build(tabmodule='testparse')
    parser.parse(s)
    statements = dhcpyacc.statements
    if statements is None:
        raise Exception('no statements adding')
    children = statements.get_child('HostStatement',True)
    findone = None
    for c in children:
        macs = c.get_child('HardwareDeclaration',True)
        if len(macs) > 0:
            for m in macs:
                if m.hard_type.value_format() == 'ethernet' and \
                    m.hard_addr.value_format() == args.macaddr:
                    findone = c
    if findone is not None:
        ips = findone.get_child('FixedAddressDeclaration',True)
        if len(ips) > 0:
            ips[0].fixedaddress = args.ipaddr
        else:
            ipchild = dhcpconf.FixedAddressDeclaration(args.ipaddr)
            findone.append_child(ipchild)
    else:
        appv = dhcpconf.HostStatement()
        hostname = dhcpconf.HostName()
        hostname.hostname = args.hostname
        appv.set_hostname(hostname)
        hostname = None
        hardtype = dhcpconf.HardwareType('ethernet')
        hardaddr = dhcpconf.HardwareAddr()
        hardaddr.hardwareaddr = args.macaddr
        decl = dhcpconf.HardwareStatement()
        decl.set_type(hardtype)
        decl.set_addr(hardaddr)
        hostdecl = dhcpconf.HostDeclaration()
        hostdecl.append_child(decl)
        hostdecls = dhcpconf.HostDeclarations()
        appv.append_child(hostdecls)
        statements.append_child(appv)
    s = statements.format_config(0)
    write_file(s,args.output)
    sys.exit(0)
    return


def main():
    command='''
    {
        "verbose|v" : "+",
        "input|i" : null,
        "macaddr|m" : null,
        "ipaddr|I" : null,
        "hostname|H" : null,
        "config<config_handler>" : {
            "$" : 0
        },
        "addhost<addhost_handler>" : {
            "$" : 0
        }
    }
    '''
    parser = extargsparse.ExtArgsParse()
    parser.load_command_line_string(command)
    args = parser.parse_command_line()
    return

if __name__ == '__main__':
    main()

