{
    "backing_store_declaration": {
        "prefix": "backing_store_declaration",
        "yacc": [
            {
                "clause": " BACKING_STORE path; BACKING_STORE;",
                "func": "if len(p) == 3:;{logging.info('get 3 backing_store_declaration');p[0] = tgtconf.BackingStoreDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;}elif len(p) == 2:;{p[0] = tgtconf.BackingStoreDeclaration(None,None,p.slice[1],p.slice[1]);}return;"
            }
        ]
    },
    "direct_store_declaration": {
        "prefix": "direct_store_declaration",
        "yacc": [
            {
                "clause": " DIRECT_STORE path;",
                "func": "p[0] = tgtconf.DirectStoreDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "driver_declaration": {
        "prefix": "driver_declaration",
        "yacc": [
            {
                "clause": " DRIVER lld_name;",
                "func": "p[0] = tgtconf.DriverDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "empty": {
        "prefix": "empty",
        "yacc": [
            {
                "clause": ";",
                "func": "startpos = location.Location(p.lexer.lineno,(p.lexer.lexpos-p.lexer.linepos),p.lexer.lineno,(p.lexer.lexpos-p.lexer.linepos));p[0] = tgtconf.YaccDhcpObject('Empty',None,startpos,startpos);return;"
            }
        ]
    },
    "include_statement": {
        "prefix": "include_statement",
        "yacc": [
            {
                "clause": " INCLUDE path;",
                "func": "p[0] = tgtconf.IncludeStatement(p[2].get_path(),p.slice[1],p[2]);p[2] = None;return;"
            }
        ]
    },
    "iqn_name": {
        "prefix": "iqn_name",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.IQNName(None,None,p.slice[1],p.slice[1]);p[0].start_name(p.slice[1].value);return;"
            },
            {
                "clause": " iqn_name DOT TEXT; iqn_name DOT NUMBER; iqn_name COLON TEXT; iqn_name COLON NUMBER;",
                "func": "p[0] = p[1];p[0].append_name(p.slice[2].value,p.slice[3].value);p[1] = None;return;"
            }
        ]
    },
    "lld_name": {
        "prefix": "lld_name",
        "yacc": [
            {
                "clause": " ISCSI; ISER;",
                "func": "p[0] = tgtconf.LLDName(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "path": {
        "prefix": "path",
        "yacc": [
            {
                "clause": " NUMBER; TEXT; SLASH; STAR; DOT;",
                "func": "p[0] = tgtconf.Path(None,None,p.slice[1],p.slice[1]);p[0].start_path(p.slice[1].value);return;"
            },
            {
                "clause": " path SLASH; path NUMBER; path TEXT; path STAR; path DOT;",
                "func": "p[0] = p[1];p[0].set_endpos(p.slice[2]);p[0].append_path(p.slice[2].value);p[1] = None;return;"
            }
        ]
    },
    "target_declarations": {
        "prefix": "target_declarations",
        "yacc": [
            {
                "clause": " empty; target_declarations target_declaration;",
                "func": "if len(p) == 2:;{p[0] = tgtconf.TargetDeclarations(None,None,p[1],p[1]);p[1] = None;}elif len(p) == 3:;{p[0] = p[1].append_child_and_set_pos(p[2]);p[1] = None;p[2] = None;}return;"
            }
        ]
    },
    "target_prefix": {
        "prefix": "target_prefix",
        "yacc": [
            {
                "clause": " LBRACKET TARGET iqn_name RBRACKET;",
                "func": "p[0] = p[3];p[0].set_startpos(p.slice[1]);p[0].set_endpos(p.slice[4]);p[3] = None;return;"
            }
        ]
    },
    "target_statement": {
        "prefix": "target_statement",
        "yacc": [
            {
                "clause": " target_prefix target_declarations target_suffix;",
                "func": "p[0] = tgtconf.TargetStatement(None,None,p[1],p[3]);p[0].set_name(p[1]);p[0].append_child(p[2]);p[1] = None;p[2] = None;p[3] = None;logging.info('get target %s'%(repr(p[0])));return;"
            }
        ]
    },
    "target_suffix": {
        "prefix": "target_suffix",
        "yacc": [
            {
                "clause": " LBRACKET SLASH TARGET RBRACKET;",
                "func": "p[0] = tgtconf.TargetSuffix(None,None,p.slice[1],p.slice[4]);return;"
            }
        ]
    },
    "initiator_address_declaration": {
        "prefix": "initiator_address_declaration",
        "yacc": [
            {
                "clause": " INITIATOR_ADDRESS ipaddr;",
                "func": "p[0] = tgtconf.InitiatorAddress(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "ipaddr": {
        "prefix": "ipaddr",
        "yacc": [
            {
                "clause": " ipv4_addr; ipv6_addr;",
                "func": "p[0] = p[1];p[1] = None;return;"
            }
        ]
    },
    "ipv4_addr": {
        "prefix": "ipv4_addr",
        "yacc": [
            {
                "clause": " NUMBER DOT NUMBER DOT NUMBER DOT NUMBER;",
                "func": "p[0] = tgtconf.Ipv4Addr(None,None,p.slice[1],p.slice[7]);p[0].start_addr(p.slice[1].value);idx = 3;while idx < 8:;{p[0].add_dot_text(p.slice[idx].value);idx += 2;}return;"
            }
        ]
    },
    "ipv6_addr": {
        "prefix": "ipv6_addr",
        "yacc": [
            {
                "clause": " NUMBER; TEXT;",
                "func": "p[0] = tgtconf.Ipv6Addr(None,None,p.slice[1],p.slice[1]);p[0].start_addr(p.slice[1].value);return;"
            },
            {
                "clause": " ipv6_addr COLON;",
                "func": "p[0] = p[1];p[0].add_colon();p[0].set_endpos(p.slice[2]);p[1] = None;return;"
            },
            {
                "clause": " ipv6_addr COLON TEXT; ipv6_addr COLON NUMBER;",
                "func": "p[0] = p[1];p[0].add_colon_text(p.slice[3].value);p[0].set_endpos(p.slice[3]);p[1] = None;return;"
            }
        ]
    },
    "host_name": {
        "prefix": "host_name",
        "yacc": [
            {
                "clause": " NUMBER; TEXT;",
                "func": "p[0] = tgtconf.HostName(None,None,p.slice[1],p.slice[1]);p[0].start_value(p.slice[1].value);return;"
            },
            {
                "clause": " host_name DOT; host_name NUMBER; host_name TEXT; host_name COLON;",
                "func": "p[0] = p[1];p[0].append_value(p.slice[2].value);p[0].set_endpos(p.slice[2]);p[1] = None;return;"
            }
        ]
    },
    "initiator_name_declaration": {
        "prefix": "initiator_name_declaration",
        "yacc": [
            {
                "clause": " INITIATOR_NAME host_name;",
                "func": "p[0] = tgtconf.InitiatorName(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "incominguser_declaration": {
        "prefix": "incominguser_declaration",
        "yacc": [
            {
                "clause": " INCOMINGUSER user password;",
                "func": "p[0] = tgtconf.IncomingUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "password": {
        "prefix": "password",
        "yacc": [
            {
                "clause": " TEXT;",
                "func": "p[0] = tgtconf.Password(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "user": {
        "prefix": "user",
        "yacc": [
            {
                "clause": " TEXT;",
                "func": "p[0] = tgtconf.User(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "outgoinguser_declaration": {
        "prefix": "outgoinguser_declaration",
        "yacc": [
            {
                "clause": " OUTGOINGUSER user password;",
                "func": "p[0] = tgtconf.OutGoingUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "controller_tid_declaration": {
        "prefix": "controller_tid_declaration",
        "yacc": [
            {
                "clause": " CONTROLLER_TID tid;",
                "func": "p[0] = tgtconf.ControllerTid(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[1] = None;return;"
            }
        ]
    },
    "tid": {
        "prefix": "tid",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.Tid(None,None,p.slice[1],p.slice[1]);p[0].set_value(p.slice[1].value);return;"
            }
        ]
    },
    "default_driver_statement": {
        "prefix": "default_driver_statement",
        "yacc": [
            {
                "clause": " DEFAULT_DRIVER lld_name;",
                "func": "p[0] = tgtconf.DefaultDriver(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "target_declaration": {
        "prefix": "target_declaration",
        "yacc": [
            {
                "clause": " backing_store_declaration; direct_store_declaration; driver_declaration; initiator_address_declaration; initiator_name_declaration; incominguser_declaration; outgoinguser_declaration; controller_tid_declaration;",
                "func": "p[0] = p[1];p[1] = None;return;"
            }
        ]
    },
    "ignore_errors_statement": {
        "prefix": "ignore_errors_statement",
        "yacc": [
            {
                "clause": " IGNORE_ERRORS YES; IGNORE_ERRORS NO;",
                "func": "p[0] = tgtconf.IgnoreErrors(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "control_port_statement": {
        "prefix": "control_port_statement",
        "yacc": [
            {
                "clause": " CONTROL_PORT NUMBER;",
                "func": "p[0] = tgtconf.ControlPort(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "isns_server_ip_statement": {
        "prefix": "isns_server_ip_statement",
        "yacc": [
            {
                "clause": " ISNS_SERVER_IP ipaddr;",
                "func": "p[0] = tgtconf.iSNSServerIP(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "isns_access_control_statement": {
        "prefix": "isns_access_control_statement",
        "yacc": [
            {
                "clause": " ISNS_ACCESS_CONTROL ON; ISNS_ACCESS_CONTROL OFF;",
                "func": "p[0] = tgtconf.iSNSAccessControl(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "isns_server_port_statement": {
        "prefix": "isns_server_port_statement",
        "yacc": [
            {
                "clause": " ISNS_SERVER_PORT NUMBER;",
                "func": "p[0] = tgtconf.iSNSServerPort(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "isns_statement": {
        "prefix": "isns_statement",
        "yacc": [
            {
                "clause": " ISNS ON; ISNS OFF;",
                "func": "p[0] = tgtconf.iSNS(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "incoming_discovery_user_statement": {
        "prefix": "incoming_discovery_user_statement",
        "yacc": [
            {
                "clause": " INCOMING_DISCOVERY_USER user password;",
                "func": "p[0] = tgtconf.InComingDiscoveryUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);return;"
            }
        ]
    },
    "outgoing_discovery_user_statement": {
        "prefix": "outgoing_discovery_user_statement",
        "yacc": [
            {
                "clause": " OUTGOING_DISCOVERY_USER user password;",
                "func": "p[0] = tgtconf.OutGoingDiscoveryUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);return;"
            }
        ]
    },
    "backing_store_lun_prefix": {
        "prefix": "backing_store_lun_prefix",
        "yacc": [
            {
                "clause": " LBRACKET BACKING_STORE path RBRACKET;",
                "func": "p[0] = tgtconf.BackingStoreLunPrefix(None,None,p.slice[1],p.slice[4]);p[0].set_path(p[3]);p[3] = None;return;"
            }
        ]
    },
    "backing_store_lun_statement": {
        "prefix": "backing_store_lun_statement",
        "yacc": [
            {
                "clause": " backing_store_lun_prefix lun_declarations backing_store_lun_suffix;",
                "func": "p[0] = tgtconf.BackingStoreLunStatement(None,None,p[1],p[3]);p[0].set_name(p[1]);p[0].append_child(p[2]);p[1] = None;p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "backing_store_lun_suffix": {
        "prefix": "backing_store_lun_suffix",
        "yacc": [
            {
                "clause": " LBRACKET SLASH BACKING_STORE RBRACKET;",
                "func": "p[0] = tgtconf.BackingStoreLunSuffix(None,None,p.slice[1],p.slice[4]);return;"
            }
        ]
    },
    "lun_declarations": {
        "prefix": "lun_declarations",
        "yacc": [
            {
                "clause": " empty; lun_declarations lun_declaration;",
                "func": "if len(p) == 2:;{p[0] = tgtconf.LunDeclarations(None,None,p[1],p[1]);p[1] = None;}elif len(p) == 3:;{p[0] = p[1].append_child_and_set_pos(p[2]);p[1] = None;p[2] = None;}return;"
            }
        ]
    },
    "write_cache_lun_declaration": {
        "prefix": "write_cache_lun_declaration",
        "yacc": [
            {
                "clause": " WRITE_CACHE ON; WRITE_CACHE OFF;",
                "func": "p[0] = tgtconf.WriteCache(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "scsi_id_lun_declaration": {
        "prefix": "scsi_id_lun_declaration",
        "yacc": [
            {
                "clause": " SCSI_ID scsi_id_part;",
                "func": "p[0] = tgtconf.ScsiIdLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "scsi_id_part": {
        "prefix": "scsi_id_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.ScsiId(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "include" : "INCLUDE",
    "target" : "TARGET",
    "direct-store" : "DIRECT_STORE",
    "backing-store" : "BACKING_STORE",
    "iscsi" : "ISCSI",
    "iser" : "ISER" ,
    "driver" : "DRIVER",
    "initiator-address" : "INITIATOR_ADDRESS",
    "initiator-name" : "INITIATOR_NAME",
    "incominguser" : "INCOMINGUSER",
    "outgoinguser" : "OUTGOINGUSER",
    "controller_tid" : "CONTROLLER_TID",
    "default-driver" : "DEFAULT_DRIVER",
    "yes" : "YES",
    "no" : "NO",
    "ignore-errors" : "IGNORE_ERRORS",
    "control-port" : "CONTROL_PORT",
    "iSNSServerIP"  : "ISNS_SERVER_IP",
    "iSNSAccessControl" : "ISNS_ACCESS_CONTROL",
    "on" : "ON",
    "off" : "OFF",
    "iSNSServerPort" : "ISNS_SERVER_PORT",
    "iSNS" : "ISNS",
    "incomingdiscoveryuser" : "INCOMING_DISCOVERY_USER",
    "outgoingdiscoveryuser" : "OUTGOING_DISCOVERY_USER",
    "write-cache" : "WRITE_CACHE",
    "scsi_id" : "SCSI_ID"
}