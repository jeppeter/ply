{
    "backing_store_declaration": {
        "prefix": "backing_store_declaration",
        "yacc": [
            {
                "clause": " BACKING_STORE path_part; BACKING_STORE;",
                "func": "if len(p) == 3:;{logging.info('get 3 backing_store_declaration');p[0] = tgtconf.BackingStoreDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;}elif len(p) == 2:;{p[0] = tgtconf.BackingStoreDeclaration(None,None,p.slice[1],p.slice[1]);}return;"
            }
        ]
    },
    "backing_store_lun_prefix": {
        "prefix": "backing_store_lun_prefix",
        "yacc": [
            {
                "clause": " LBRACKET BACKING_STORE path_part RBRACKET;",
                "func": "p[0] = tgtconf.BackingStoreLunPrefix(None,None,p.slice[1],p.slice[4]);p[0].set_path(p[3]);p[3] = None;return;"
            }
        ]
    },
    "backing_store_lun_statement": {
        "prefix": "backing_store_lun_statement",
        "yacc": [
            {
                "clause": " backing_store_lun_prefix lun_declarations backing_store_lun_suffix;",
                "func": "p[0] = tgtconf.BackingStoreLunStatement(None,None,p[1],p[3]);p[0].set_name(p[1]);p[0].append_child(p[2]);p[1] = None;p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "backing_store_lun_suffix": {
        "prefix": "backing_store_lun_suffix",
        "yacc": [
            {
                "clause": " LBRACKET SLASH BACKING_STORE RBRACKET;",
                "func": "p[0] = tgtconf.BackingStoreLunSuffix(None,None,p.slice[1],p.slice[4]);return;"
            }
        ]
    },
    "control_port_statement": {
        "prefix": "control_port_statement",
        "yacc": [
            {
                "clause": " CONTROL_PORT NUMBER;",
                "func": "p[0] = tgtconf.ControlPort(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "controller_tid_declaration": {
        "prefix": "controller_tid_declaration",
        "yacc": [
            {
                "clause": " CONTROLLER_TID tid;",
                "func": "p[0] = tgtconf.ControllerTid(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[1] = None;return;"
            }
        ]
    },
    "default_driver_statement": {
        "prefix": "default_driver_statement",
        "yacc": [
            {
                "clause": " DEFAULT_DRIVER lld_name;",
                "func": "p[0] = tgtconf.DefaultDriver(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "direct_store_declaration": {
        "prefix": "direct_store_declaration",
        "yacc": [
            {
                "clause": " DIRECT_STORE path_part;",
                "func": "p[0] = tgtconf.DirectStoreDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "driver_declaration": {
        "prefix": "driver_declaration",
        "yacc": [
            {
                "clause": " DRIVER lld_name;",
                "func": "p[0] = tgtconf.DriverDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "empty": {
        "prefix": "empty",
        "yacc": [
            {
                "clause": ";",
                "func": "startpos = location.Location(p.lexer.lineno,(p.lexer.lexpos-p.lexer.linepos),p.lexer.lineno,(p.lexer.lexpos-p.lexer.linepos));p[0] = tgtconf.YaccDhcpObject('Empty',None,startpos,startpos);return;"
            }
        ]
    },
    "host_name": {
        "prefix": "host_name",
        "yacc": [
            {
                "clause": " NUMBER; TEXT;",
                "func": "p[0] = tgtconf.HostName(None,None,p.slice[1],p.slice[1]);p[0].start_value(p.slice[1].value);return;"
            },
            {
                "clause": " host_name DOT; host_name NUMBER; host_name TEXT; host_name COLON;",
                "func": "p[0] = p[1];p[0].append_value(p.slice[2].value);p[0].set_endpos(p.slice[2]);p[1] = None;return;"
            }
        ]
    },
    "ignore_errors_statement": {
        "prefix": "ignore_errors_statement",
        "yacc": [
            {
                "clause": " IGNORE_ERRORS YES; IGNORE_ERRORS NO;",
                "func": "p[0] = tgtconf.IgnoreErrors(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "include_statement": {
        "prefix": "include_statement",
        "yacc": [
            {
                "clause": " INCLUDE path_part;",
                "func": "p[0] = tgtconf.IncludeStatement(p[2].get_path(),p.slice[1],p[2]);p[2] = None;return;"
            }
        ]
    },
    "incoming_discovery_user_statement": {
        "prefix": "incoming_discovery_user_statement",
        "yacc": [
            {
                "clause": " INCOMING_DISCOVERY_USER user password;",
                "func": "p[0] = tgtconf.InComingDiscoveryUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);return;"
            }
        ]
    },
    "incominguser_declaration": {
        "prefix": "incominguser_declaration",
        "yacc": [
            {
                "clause": " INCOMINGUSER user password;",
                "func": "p[0] = tgtconf.IncomingUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "initiator_address_declaration": {
        "prefix": "initiator_address_declaration",
        "yacc": [
            {
                "clause": " INITIATOR_ADDRESS ipaddr;",
                "func": "p[0] = tgtconf.InitiatorAddress(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "initiator_name_declaration": {
        "prefix": "initiator_name_declaration",
        "yacc": [
            {
                "clause": " INITIATOR_NAME host_name;",
                "func": "p[0] = tgtconf.InitiatorName(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "ipaddr": {
        "prefix": "ipaddr",
        "yacc": [
            {
                "clause": " ipv4_addr; ipv6_addr;",
                "func": "p[0] = p[1];p[1] = None;return;"
            }
        ]
    },
    "ipv4_addr": {
        "prefix": "ipv4_addr",
        "yacc": [
            {
                "clause": " NUMBER DOT NUMBER DOT NUMBER DOT NUMBER;",
                "func": "p[0] = tgtconf.Ipv4Addr(None,None,p.slice[1],p.slice[7]);p[0].start_addr(p.slice[1].value);idx = 3;while idx < 8:;{p[0].add_dot_text(p.slice[idx].value);idx += 2;}return;"
            }
        ]
    },
    "ipv6_addr": {
        "prefix": "ipv6_addr",
        "yacc": [
            {
                "clause": " NUMBER; TEXT;",
                "func": "p[0] = tgtconf.Ipv6Addr(None,None,p.slice[1],p.slice[1]);p[0].start_addr(p.slice[1].value);return;"
            },
            {
                "clause": " ipv6_addr COLON;",
                "func": "p[0] = p[1];p[0].add_colon();p[0].set_endpos(p.slice[2]);p[1] = None;return;"
            },
            {
                "clause": " ipv6_addr COLON TEXT; ipv6_addr COLON NUMBER;",
                "func": "p[0] = p[1];p[0].add_colon_text(p.slice[3].value);p[0].set_endpos(p.slice[3]);p[1] = None;return;"
            }
        ]
    },
    "iqn_name": {
        "prefix": "iqn_name",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.IQNName(None,None,p.slice[1],p.slice[1]);p[0].start_name(p.slice[1].value);return;"
            },
            {
                "clause": " iqn_name DOT TEXT; iqn_name DOT NUMBER; iqn_name COLON TEXT; iqn_name COLON NUMBER;",
                "func": "p[0] = p[1];p[0].append_name(p.slice[2].value,p.slice[3].value);p[1] = None;return;"
            }
        ]
    },
    "isns_access_control_statement": {
        "prefix": "isns_access_control_statement",
        "yacc": [
            {
                "clause": " ISNS_ACCESS_CONTROL ON; ISNS_ACCESS_CONTROL OFF;",
                "func": "p[0] = tgtconf.iSNSAccessControl(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "isns_server_ip_statement": {
        "prefix": "isns_server_ip_statement",
        "yacc": [
            {
                "clause": " ISNS_SERVER_IP ipaddr;",
                "func": "p[0] = tgtconf.iSNSServerIP(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "isns_server_port_statement": {
        "prefix": "isns_server_port_statement",
        "yacc": [
            {
                "clause": " ISNS_SERVER_PORT NUMBER;",
                "func": "p[0] = tgtconf.iSNSServerPort(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "isns_statement": {
        "prefix": "isns_statement",
        "yacc": [
            {
                "clause": " ISNS ON; ISNS OFF;",
                "func": "p[0] = tgtconf.iSNS(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "lld_name": {
        "prefix": "lld_name",
        "yacc": [
            {
                "clause": " ISCSI; ISER;",
                "func": "p[0] = tgtconf.LLDName(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "lun_declarations": {
        "prefix": "lun_declarations",
        "yacc": [
            {
                "clause": " empty; lun_declarations lun_declaration;",
                "func": "if len(p) == 2:;{p[0] = tgtconf.LunDeclarations(None,None,p[1],p[1]);p[1] = None;}elif len(p) == 3:;{p[0] = p[1].append_child_and_set_pos(p[2]);p[1] = None;p[2] = None;}return;"
            }
        ]
    },
    "outgoing_discovery_user_statement": {
        "prefix": "outgoing_discovery_user_statement",
        "yacc": [
            {
                "clause": " OUTGOING_DISCOVERY_USER user password;",
                "func": "p[0] = tgtconf.OutGoingDiscoveryUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);return;"
            }
        ]
    },
    "outgoinguser_declaration": {
        "prefix": "outgoinguser_declaration",
        "yacc": [
            {
                "clause": " OUTGOINGUSER user password;",
                "func": "p[0] = tgtconf.OutGoingUser(None,None,p.slice[1],p[3]);p[0].append_child(p[2]);p[0].append_child(p[3]);p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "password": {
        "prefix": "password",
        "yacc": [
            {
                "clause": " TEXT;",
                "func": "p[0] = tgtconf.Password(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "path_part": {
        "prefix": "path_part",
        "yacc": [
            {
                "clause": " NUMBER; TEXT; SLASH; STAR; DOT;",
                "func": "p[0] = tgtconf.Path(None,None,p.slice[1],p.slice[1]);p[0].start_path(p.slice[1].value);return;"
            },
            {
                "clause": " path_part SLASH; path_part NUMBER; path_part TEXT; path_part STAR; path_part DOT;",
                "func": "p[0] = p[1];p[0].set_endpos(p.slice[2]);p[0].append_path(p.slice[2].value);p[1] = None;return;"
            }
        ]
    },
    "product_id_lun_declaration": {
        "prefix": "product_id_lun_declaration",
        "yacc": [
            {
                "clause": " PRODUCT_ID product_id_part;",
                "func": "p[0] = tgtconf.ProductIdLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "product_id_part": {
        "prefix": "product_id_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.ProductId(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "product_rev_lun_declaration": {
        "prefix": "product_rev_lun_declaration",
        "yacc": [
            {
                "clause": " PRODUCT_REV product_rev_part;",
                "func": "p[0] = tgtconf.ProductRevLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "product_rev_part": {
        "prefix": "product_rev_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.ProductRev(None,None,p.slice[1],p.slice[1]);p[0].start_rev(p.slice[1].value);return;"
            },
            {
                "clause": " product_rev_part DOT; product_rev_part NUMBER; product_rev_part TEXT;",
                "func": "p[0] = p[1];p[0].append_rev(p.slice[2].value);p[0].set_endpos(p.slice[2]);p[1] = None;return;"
            }
        ]
    },
    "scsi_id_lun_declaration": {
        "prefix": "scsi_id_lun_declaration",
        "yacc": [
            {
                "clause": " SCSI_ID scsi_id_part;",
                "func": "p[0] = tgtconf.ScsiIdLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "scsi_id_part": {
        "prefix": "scsi_id_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.ScsiId(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "scsi_sn_lun_declaration": {
        "prefix": "scsi_sn_lun_declaration",
        "yacc": [
            {
                "clause": " SCSI_SN scsi_sn_part;",
                "func": "p[0] = tgtconf.ScsiSnLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "scsi_sn_part": {
        "prefix": "scsi_sn_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.ScsiSn(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "sense_format_lun_declaration": {
        "prefix": "sense_format_lun_declaration",
        "yacc": [
            {
                "clause": " SENSE_FORMAT sense_format_part;",
                "func": "p[0] = tgtconf.SenseFormatLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "sense_format_part": {
        "prefix": "sense_format_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.SenseFormat(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "target_declaration": {
        "prefix": "target_declaration",
        "yacc": [
            {
                "clause": " backing_store_declaration; direct_store_declaration; driver_declaration; initiator_address_declaration; initiator_name_declaration; incominguser_declaration; outgoinguser_declaration; controller_tid_declaration;",
                "func": "p[0] = p[1];p[1] = None;return;"
            }
        ]
    },
    "target_declarations": {
        "prefix": "target_declarations",
        "yacc": [
            {
                "clause": " empty; target_declarations target_declaration;",
                "func": "if len(p) == 2:;{p[0] = tgtconf.TargetDeclarations(None,None,p[1],p[1]);p[1] = None;}elif len(p) == 3:;{p[0] = p[1].append_child_and_set_pos(p[2]);p[1] = None;p[2] = None;}return;"
            }
        ]
    },
    "target_prefix": {
        "prefix": "target_prefix",
        "yacc": [
            {
                "clause": " LBRACKET TARGET iqn_name RBRACKET;",
                "func": "p[0] = p[3];p[0].set_startpos(p.slice[1]);p[0].set_endpos(p.slice[4]);p[3] = None;return;"
            }
        ]
    },
    "target_statement": {
        "prefix": "target_statement",
        "yacc": [
            {
                "clause": " target_prefix target_declarations target_suffix;",
                "func": "p[0] = tgtconf.TargetStatement(None,None,p[1],p[3]);p[0].set_name(p[1]);p[0].append_child(p[2]);p[1] = None;p[2] = None;p[3] = None;logging.info('get target %s'%(repr(p[0])));return;"
            }
        ]
    },
    "target_suffix": {
        "prefix": "target_suffix",
        "yacc": [
            {
                "clause": " LBRACKET SLASH TARGET RBRACKET;",
                "func": "p[0] = tgtconf.TargetSuffix(None,None,p.slice[1],p.slice[4]);return;"
            }
        ]
    },
    "tid": {
        "prefix": "tid",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.Tid(None,None,p.slice[1],p.slice[1]);p[0].set_value(p.slice[1].value);return;"
            }
        ]
    },
    "user": {
        "prefix": "user",
        "yacc": [
            {
                "clause": " TEXT;",
                "func": "p[0] = tgtconf.User(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "vendor_id_lun_declaration": {
        "prefix": "vendor_id_lun_declaration",
        "yacc": [
            {
                "clause": " VENDOR_ID vendor_id_part;",
                "func": "p[0] = tgtconf.VendorIdLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "vendor_id_part": {
        "prefix": "vendor_id_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.VendorId(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "write_cache_lun_declaration": {
        "prefix": "write_cache_lun_declaration",
        "yacc": [
            {
                "clause": " WRITE_CACHE ON; WRITE_CACHE OFF;",
                "func": "p[0] = tgtconf.WriteCache(p.slice[2].value,p.slice[1],p.slice[2]);return;"
            }
        ]
    },
    "path_lun_declaration": {
        "prefix": "path_lun_declaration",
        "yacc": [
            {
                "clause": " PATH path_part;",
                "func": "p[0] = tgtconf.PathLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "removable_lun_declaration": {
        "prefix": "removable_lun_declaration",
        "yacc": [
            {
                "clause": " REMOVABLE removable_part;",
                "func": "p[0] = tgtconf.RemovableLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);p[2] = None;return;"
            }
        ]
    },
    "removable_part": {
        "prefix": "removable_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.Removable(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "allow_in_use_lun_declaration": {
        "prefix": "allow_in_use_lun_declaration",
        "yacc": [
            {
                "clause": " ALLOW_IN_USE allow_in_use_part;",
                "func": "p[0] = tgtconf.AllowInUseLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "allow_in_use_part": {
        "prefix": "allow_in_use_part",
        "yacc": [
            {
                "clause": " YES; NO;",
                "func": "p[0] = tgtconf.AllowInUse(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "bs_type_lun_declaration": {
        "prefix": "bs_type_lun_declaration",
        "yacc": [
            {
                "clause": " BS_TYPE bs_type_part;",
                "func": "p[0] = tgtconf.BsTypeLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "bs_type_part": {
        "prefix": "bs_type_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.BsType(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "device_type_lun_declaration": {
        "prefix": "device_type_lun_declaration",
        "yacc": [
            {
                "clause": " DEVICE_TYPE device_type_part;",
                "func": "p[0] = tgtconf.DeviceTypeLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "device_type_part": {
        "prefix": "device_type_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.DeviceType(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "mode_page_lun_declaration": {
        "prefix": "mode_page_lun_declaration",
        "yacc": [
            {
                "clause": " MODE_PAGE mode_page_part;",
                "func": "p[0] = tgtconf.ModePageLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "mode_page_part": {
        "prefix": "mode_page_part",
        "yacc": [
            {
                "clause": " TEXT; NUMBER;",
                "func": "p[0] = tgtconf.ModePage(None,None,p.slice[1],p.slice[1]);p[0].start_value(p.slice[1].value);return;"
            },
            {
                "clause": " mode_page_part TEXT; mode_page_part NUMBER; mode_page_part COLON;",
                "func": "p[0] = p[1];p[0].append_value(p.slice[2].value);p[0].set_endpos(p.slice[2]);p[1] = None;return;"
            }
        ]
    },
    "readonly_lun_declaration": {
        "prefix": "readonly_lun_declaration",
        "yacc": [
            {
                "clause": " READONLY readonly_part;",
                "func": "p[0] = tgtconf.ReadOnlyLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "readonly_part": {
        "prefix": "readonly_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.ReadOnly(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "block_size_lun_declaration": {
        "prefix": "block_size_lun_declaration",
        "yacc": [
            {
                "clause": " BLOCK_SIZE block_size_part;",
                "func": "p[0] = tgtconf.BlockSizeLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "block_size_part": {
        "prefix": "block_size_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.BlockSize(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "la_lba_lun_declaration": {
        "prefix": "la_lba_lun_declaration",
        "yacc": [
            {
                "clause": " LA_LBA la_lba_part;",
                "func": "p[0] = tgtconf.LaLbaLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "la_lba_part": {
        "prefix": "la_lba_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.LaLba(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "llppbe_lun_declaration": {
        "prefix": "llppbe_lun_declaration",
        "yacc": [
            {
                "clause": " LLPPBE llppbe_part;",
                "func": "p[0] = tgtconf.LlppbeLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "llppbe_part": {
        "prefix": "llppbe_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.Llppbe(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "optimal_xfer_gran_lun_declaration": {
        "prefix": "optimal_xfer_gran_lun_declaration",
        "yacc": [
            {
                "clause": " OPTIMAL_XFER_GRAN optimal_xfer_gran_part;",
                "func": "p[0] = tgtconf.OptimalXferGranLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "optimal_xfer_gran_part": {
        "prefix": "optimal_xfer_gran_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.OptimalXferGran(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "optimal_xfer_len_lun_declaration": {
        "prefix": "optimal_xfer_len_lun_declaration",
        "yacc": [
            {
                "clause": " OPTIMAL_XFER_LEN optimal_xfer_len_part;",
                "func": "p[0] = tgtconf.OptimalXferLenLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "optimal_xfer_len_part": {
        "prefix": "optimal_xfer_len_part",
        "yacc": [
            {
                "clause": " NUMBER;",
                "func": "p[0] = tgtconf.OptimalXferLen(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "params_lun_declaration": {
        "prefix": "params_lun_declaration",
        "yacc": [
            {
                "clause": " PARAMS params_part;",
                "func": "p[0] = tgtconf.ParamsLunDeclaration(None,None,p.slice[1],p[2]);p[0].append_child(p[2]);return;"
            }
        ]
    },
    "params_part": {
        "prefix": "params_part",
        "yacc": [
            {
                "clause": " NUMBER; TEXT;",
                "func": "p[0] = tgtconf.Params(p.slice[1].value,p.slice[1],p.slice[1]);return;"
            }
        ]
    },
    "direct_store_lun_prefix": {
        "prefix": "direct_store_lun_prefix",
        "yacc": [
            {
                "clause": " LBRACKET DIRECT_STORE path_part RBRACKET;",
                "func": "p[0] = tgtconf.DirectStoreLunPrefix(None,None,p.slice[1],p.slice[4]);p[0].set_path(p[3]);p[3] = None;return;"
            }
        ]
    },
    "direct_store_lun_statement": {
        "prefix": "direct_store_lun_statement",
        "yacc": [
            {
                "clause": " direct_store_lun_prefix lun_declarations direct_store_lun_suffix;",
                "func": "p[0] = tgtconf.DirectStoreLunStatement(None,None,p[1],p[3]);p[0].set_name(p[1]);p[0].append_child(p[2]);p[1] = None;p[2] = None;p[3] = None;return;"
            }
        ]
    },
    "direct_store_lun_suffix": {
        "prefix": "direct_store_lun_suffix",
        "yacc": [
            {
                "clause": " LBRACKET SLASH DIRECT_STORE RBRACKET;",
                "func": "p[0] = tgtconf.DirectStoreLunSuffix(None,None,p.slice[1],p.slice[4]);return;"
            }
        ]
    },
    "lun_declaration": {
        "prefix": "lun_declaration",
        "yacc": [
            {
                "clause": " write_cache_lun_declaration; scsi_id_lun_declaration; scsi_sn_lun_declaration; vendor_id_lun_declaration; product_id_lun_declaration; product_rev_lun_declaration; sense_format_lun_declaration; removable_lun_declaration; path_lun_declaration; mode_page_lun_declaration; readonly_lun_declaration; device_type_lun_declaration; bs_type_lun_declaration; allow_in_use_lun_declaration; block_size_lun_declaration; llppbe_lun_declaration; la_lba_lun_declaration; optimal_xfer_gran_lun_declaration; optimal_xfer_len_lun_declaration; params_lun_declaration;",
                "func": "p[0] = p[1];p[1] = None;return;"
            }
        ]
    },
    "statement": {
        "prefix": "statement",
        "yacc": [
            {
                "clause": " include_statement; target_statement; default_driver_statement; ignore_errors_statement; control_port_statement; isns_server_ip_statement; isns_access_control_statement; isns_server_port_statement; isns_statement; incoming_discovery_user_statement; outgoing_discovery_user_statement; backing_store_lun_statement; direct_store_lun_statement;",
                "func": "p[0] = p[1];p[1] = None;return;"
            }
        ]
    },
    "statements": {
        "prefix": "statements",
        "yacc": [
            {
                "clause": " empty; statements statement;",
                "func": "if len(p) == 2:;{p[0] = tgtconf.Statements(None,None,p[1],p[1]);p[1] = None;}elif len(p) == 3:;{logging.info('p[2] filename %s'%(p[2].filename));p[0] = p[1].append_child_and_set_pos(p[2]);p[1] = None;p[2] = None;}self.set_statements(p[0]);return;"
            }
        ]
    },
    "include" : "INCLUDE",
    "target" : "TARGET",
    "direct-store" : "DIRECT_STORE",
    "backing-store" : "BACKING_STORE",
    "iscsi" : "ISCSI",
    "iser" : "ISER" ,
    "driver" : "DRIVER",
    "initiator-address" : "INITIATOR_ADDRESS",
    "initiator-name" : "INITIATOR_NAME",
    "incominguser" : "INCOMINGUSER",
    "outgoinguser" : "OUTGOINGUSER",
    "controller_tid" : "CONTROLLER_TID",
    "default-driver" : "DEFAULT_DRIVER",
    "yes" : "YES",
    "no" : "NO",
    "ignore-errors" : "IGNORE_ERRORS",
    "control-port" : "CONTROL_PORT",
    "iSNSServerIP"  : "ISNS_SERVER_IP",
    "iSNSAccessControl" : "ISNS_ACCESS_CONTROL",
    "on" : "ON",
    "off" : "OFF",
    "iSNSServerPort" : "ISNS_SERVER_PORT",
    "iSNS" : "ISNS",
    "incomingdiscoveryuser" : "INCOMING_DISCOVERY_USER",
    "outgoingdiscoveryuser" : "OUTGOING_DISCOVERY_USER",
    "write-cache" : "WRITE_CACHE",
    "scsi_id" : "SCSI_ID",
    "scsi_sn" : "SCSI_SN" ,
    "vendor_id" : "VENDOR_ID",
    "product_id" : "PRODUCT_ID",
    "product_rev" : "PRODUCT_REV" ,
    "sense_format" : "SENSE_FORMAT",
    "removable" : "REMOVABLE",
    "path" : "PATH",
    "mode_page" : "MODE_PAGE",
    "readonly" : "READONLY" ,
    "device-type" : "DEVICE_TYPE",
    "bs-type" : "BS_TYPE",
    "allow-in-use" : "ALLOW_IN_USE",
    "block-size" : "BLOCK_SIZE",
    "llppbe" : "LLPPBE",
    "la_lba" : "LA_LBA",
    "optimal_xfer_gran" : "OPTIMAL_XFER_GRAN",
    "optimal_xfer_len" : "OPTIMAL_XFER_LEN",
    "params" : "PARAMS"
}